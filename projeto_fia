import networkx as nx
import pandas as pd
import random
from datetime import timedelta
import time

rotas = pd.read_csv("rotas.csv")
jogos = pd.read_csv("jogos.csv")
rotas.columns = [col.strip() for col in rotas.columns]
jogos.columns = [col.strip() for col in jogos.columns]

##datas 
mask = jogos['Dia'].str.count('/').eq(1)
jogos.loc[mask, 'Dia'] = jogos.loc[mask, 'Dia'] + '/2025'

jogos['datetime'] = pd.to_datetime(
    jogos['Dia'] + ' ' + jogos['Hora'],
    format='%d/%m/%Y %H:%M'
)

##imprevistos + constantes
DURACAO_JOGO_MIN = 180
PROB_BLOQUEIO = 0.05
PROB_ATRASO = 0.10
PROB_CAPACIDADE = 0.05
PROB_CANCELAMENTO = 0.02

##grafo
G = nx.MultiDiGraph()
for _, row in rotas.iterrows():
    G.add_edge(
        row['origem'], row['destino'],
        transporte=row['transporte'],
        tempo_min=float(row['tempo_min']),
        preco_eur=float(row['preco_eur']),
        capacidade=int(row['capacidade']),
        emissoes_co2=float(row['emissoes_co2']),
        hora_partida=row['hora_partida']
    )

def imprevisto_em_uma_aresta(d, dep_time):
    r = random.random()
    dep_str = dep_time.strftime('%H:%M')
    if r < PROB_BLOQUEIO:
        return 'bloqueio', f"Bloqueio na partida às {dep_str}.", None
    elif r < PROB_BLOQUEIO + PROB_ATRASO:
        atraso = random.choice([10, 15, 20, 30, 50])
        return 'atraso', f"Atraso de {atraso} min na partida às {dep_str}.", atraso
    elif r < PROB_BLOQUEIO + PROB_ATRASO + PROB_CAPACIDADE:
        reducao = random.choice([20, 50])
        d['capacidade'] = int(d['capacidade'] * (1 - reducao/100))
        return 'capacidade', f"Capacidade reduzida em {reducao}% na partida às {dep_str}.", None
    elif r < PROB_BLOQUEIO + PROB_ATRASO + PROB_CAPACIDADE + PROB_CANCELAMENTO:
        return 'cancelamento', f"Cancelamento por greve na partida às {dep_str}.", None
    return None, None, None

def gerar_percurso(origem, destinos, num_pessoas, peso):
    ANTECEDENCIA = 30  ##antes do jogo para chegar

    atual = origem
    tempos_viagem = []
    tempos_partida = []

    ##horas saída
    current_time = None
    for i, dest in enumerate(destinos):
        if i == 0:
            caminho = nx.shortest_path(G, source=atual, target=dest, weight=peso)
            tempo_viagem = sum(
                min([d[peso] for d in G.get_edge_data(u, v).values()]) for u, v in zip(caminho, caminho[1:])
            )
            hora_jogo = jogos.loc[jogos['Estádio'] == dest, 'datetime'].iloc[0]
            current_time = hora_jogo - timedelta(minutes=tempo_viagem + ANTECEDENCIA)
            tempos_partida.append(current_time)
            tempos_viagem.append(tempo_viagem)
            atual = dest
        else:
            est_anterior = destinos[i-1]
            dt_fim_anterior = jogos.loc[jogos['Estádio'] == est_anterior, 'datetime'].iloc[0] + timedelta(minutes=DURACAO_JOGO_MIN)
            caminho = nx.shortest_path(G, source=est_anterior, target=dest, weight=peso)
            tempo_viagem = sum(
                min([d[peso] for d in G.get_edge_data(u, v).values()]) for u, v in zip(caminho, caminho[1:])
            )
            hora_jogo = jogos.loc[jogos['Estádio'] == dest, 'datetime'].iloc[0]
            partida_ideal = hora_jogo - timedelta(minutes=tempo_viagem + ANTECEDENCIA)
            partida_real = max(partida_ideal, dt_fim_anterior)
            tempos_partida.append(partida_real)
            tempos_viagem.append(tempo_viagem)
            atual = dest

    detalhes = []
    total = 0
    imprevistos_msgs = []

    atual = origem
    current_time = tempos_partida[0]

    print("\nInício do percurso:")

    for idx, dest in enumerate(destinos):
        caminho = nx.shortest_path(G, source=atual, target=dest, weight=peso)
        for u, v in zip(caminho, caminho[1:]):
            edges = G.get_edge_data(u, v)
            melhor = None
            for d in edges.values():
                if d['capacidade'] >= num_pessoas and (melhor is None or d[peso] < melhor[peso]):
                    melhor = d
            if not melhor:
                max_cap = max(d['capacidade'] for d in edges.values())
                print(f"Capacidade insuficiente em {u}->{v}: máximo {max_cap}.")
                return gerar_percurso(origem, destinos, max_cap, peso)
            tipo, msg, atraso = imprevisto_em_uma_aresta(melhor, current_time)
            if msg:
                imprevistos_msgs.append(f"{u}->{v}: {msg}")
                print(f"Imprevisto em {u}->{v}: {msg}")
            if tipo in ('bloqueio', 'cancelamento'):
                print("Reroteamento devido a imprevisto grave.")
                G.remove_edge(u, v, key=list(G.get_edge_data(u, v).keys())[0])
                return gerar_percurso(origem, destinos, num_pessoas, peso)
            if tipo == 'atraso' and atraso:
                current_time += timedelta(minutes=atraso)
            dep = current_time
            arr = dep + timedelta(minutes=melhor['tempo_min'])
            detalhes.append((u, v, melhor['transporte'], dep, arr, melhor['tempo_min'], melhor['preco_eur'], melhor['emissoes_co2']))
            total += melhor[peso]
            current_time = arr
            atual = v
        hora_jogo = jogos.loc[jogos['Estádio'] == dest, 'datetime'].iloc[0]
        print(f"Chegada a {dest} às {arr.strftime('%H:%M')}, jogo às {hora_jogo.strftime('%H:%M')}.")
        if arr < hora_jogo:
            espera = int((hora_jogo - arr).total_seconds() / 60)
            print(f"Aguardando {espera} min até o jogo.")
            if peso == 'tempo_min':
                total += espera + DURACAO_JOGO_MIN
            current_time = hora_jogo + timedelta(minutes=DURACAO_JOGO_MIN)
        else:
            print("Chegada em atraso, participação parcial.")
            if peso == 'tempo_min':
                total += DURACAO_JOGO_MIN
            current_time = arr + timedelta(minutes=DURACAO_JOGO_MIN)

    print("\nResumo de imprevistos:")
    if imprevistos_msgs:
        for m in imprevistos_msgs:
            print(f" - {m}")
    else:
        print("Nenhum imprevisto ocorreu.")

    print("\nPercurso detalhado:")
    for u, v, transp, dep, arr, tm, pr, co in detalhes:
        print(f"{u}->{v} | {transp} | saída {dep.strftime('%H:%M')} | chegada {arr.strftime('%H:%M')} | tempo {tm} | preço {pr} | CO2 {co}")
    labels = {'tempo_min': 'Tempo (min)', 'preco_eur': 'Custo (EUR)', 'emissoes_co2': 'Emissões (g CO2)'}
    print(f"\n{labels[peso]} total: {total}")

def mais_rapido(origem, destinos, num_pessoas):
    gerar_percurso(origem, destinos, num_pessoas, 'tempo_min')

def mais_barato(origem, destinos, num_pessoas):
    gerar_percurso(origem, destinos, num_pessoas, 'preco_eur')

def mais_ecologico(origem, destinos, num_pessoas):
    gerar_percurso(origem, destinos, num_pessoas, 'emissoes_co2')

def dfs_path(graph, source, target):
    visited = set()
    path = []
    def dfs(u):
        if u == target:
            return True
        visited.add(u)
        for v in graph.neighbors(u):
            if v not in visited:
                path.append((u, v))
                if dfs(v):
                    return True
                path.pop()
        return False
    dfs(source)
    return [source] + [v for _, v in path]

ALGOS = {
    1: ('DFS', dfs_path),
    2: ('BFS', lambda G, s, t: next(nx.shortest_simple_paths(G, source=s, target=t), [])),
    3: ('UCS', lambda G, s, t: nx.dijkstra_path(G, source=s, target=t, weight='tempo_min')),
    4: ('Greedy', lambda G, s, t: nx.astar_path(G, source=s, target=t, heuristic=lambda u, v: 0, weight='tempo_min')),
    5: ('A*', lambda G, s, t: nx.astar_path(G, source=s, target=t, heuristic=lambda u, v: 0, weight='tempo_min'))
}

def calcular_custo(graph, path, peso):
    total = 0
    for u, v in zip(path, path[1:]):
        data = graph.get_edge_data(u, v)
        melhor = min(data.values(), key=lambda d: d[peso])
        total += melhor[peso]
    return total

def verificar_conflitos_jogos(destinos_ids, jogos_df, G, duracao_jogo_min=180):
    jogos_sel = jogos_df[jogos_df['Jogo_id'].isin(destinos_ids)].copy()
    jogos_sel = jogos_sel.sort_values('datetime').reset_index(drop=True)

    conflitos = []

    for i in range(len(jogos_sel) - 1):
        jogo1 = jogos_sel.iloc[i]
        jogo2 = jogos_sel.iloc[i + 1]

        id1, est1, dt1 = jogo1['Jogo_id'], jogo1['Estádio'], jogo1['datetime']
        id2, est2, dt2 = jogo2['Jogo_id'], jogo2['Estádio'], jogo2['datetime']
        fim1 = dt1 + timedelta(minutes=duracao_jogo_min)

        if est1 == est2 and dt2 < fim1:
            conflitos.append((i, i + 1, id1, est1, dt1, id2, est2, dt2, "Jogos seguidos no mesmo estádio"))
            continue

        tempo_disp = (dt2 - fim1).total_seconds() / 60
        try:
            viagem_min = nx.shortest_path_length(G, source=est1, target=est2, weight='tempo_min')
        except nx.NetworkXNoPath:
            viagem_min = float('inf')

        if tempo_disp < viagem_min:
            conflitos.append((i, i + 1, id1, est1, fim1, id2, est2, dt2,
                f"Não há tempo suficiente ({int(tempo_disp)} min livres, viagem precisa de {int(viagem_min)} min)"))

    while conflitos:
        print("\n⚠  Conflitos detectados entre os jogos selecionados:")
        for idx, (i1, i2, id1, est1, dt1, id2, est2, dt2, motivo) in enumerate(conflitos):
            print(f"{idx+1}. Jogo {id1} - {est1} ({dt1.strftime('%d/%m %H:%M')})")
            print(f"   e Jogo {id2} - {est2} ({dt2.strftime('%d/%m %H:%M')})")
            print(f"   Motivo: {motivo}\n")
        escolha = input(f"Qual conflito pretende resolver? (1-{len(conflitos)}) ou ENTER para remover todos os conflitos automaticamente: ").strip()
        if not escolha.isdigit():
            remover = set()
            for c in conflitos:
                remover.add(jogos_sel.iloc[c[0]]['Jogo_id'])
                remover.add(jogos_sel.iloc[c[1]]['Jogo_id'])
            jogos_sel = jogos_sel[~jogos_sel['Jogo_id'].isin(remover)].reset_index(drop=True)
            print(f"Foram removidos os jogos em conflito. Restantes jogos: {jogos_sel['Jogo_id'].tolist()}")
            break
        idx_conflito = int(escolha) - 1
        if 0 <= idx_conflito < len(conflitos):
            c = conflitos[idx_conflito]
            op = input(f"Digite 1 para remover Jogo {c[2]} ou 2 para remover Jogo {c[5]}: ").strip()
            if op == "1":
                jogos_sel = jogos_sel[jogos_sel['Jogo_id'] != c[2]].reset_index(drop=True)
            elif op == "2":
                jogos_sel = jogos_sel[jogos_sel['Jogo_id'] != c[5]].reset_index(drop=True)
            else:
                print("Opção inválida, nenhum jogo removido.")
        else:
            print("Escolha inválida.")

        destinos_ids = jogos_sel['Jogo_id'].tolist()
        conflitos = []
        for i in range(len(jogos_sel) - 1):
            jogo1 = jogos_sel.iloc[i]
            jogo2 = jogos_sel.iloc[i + 1]
            id1, est1, dt1 = jogo1['Jogo_id'], jogo1['Estádio'], jogo1['datetime']
            id2, est2, dt2 = jogo2['Jogo_id'], jogo2['Estádio'], jogo2['datetime']
            fim1 = dt1 + timedelta(minutes=duracao_jogo_min)
            if est1 == est2 and dt2 < fim1:
                conflitos.append((i, i + 1, id1, est1, dt1, id2, est2, dt2, "Jogos seguidos no mesmo estádio"))
                continue
            tempo_disp = (dt2 - fim1).total_seconds() / 60
            try:
                viagem_min = nx.shortest_path_length(G, source=est1, target=est2, weight='tempo_min')
            except nx.NetworkXNoPath:
                viagem_min = float('inf')
            if tempo_disp < viagem_min:
                conflitos.append((i, i + 1, id1, est1, fim1, id2, est2, dt2,
                    f"Não há tempo suficiente ({int(tempo_disp)} min livres, viagem precisa de {int(viagem_min)} min)"))
    return jogos_sel['Estádio'].tolist(), jogos_sel['Jogo_id'].tolist()

def simular_percurso():
    pessoas = input("Insira o número de pessoas (1-100): ")
    while not pessoas.isdigit() or int(pessoas) < 1 or int(pessoas) > 100:
        pessoas = input("Valor inválido. Digite um número entre 1 e 100: ")
    num = int(pessoas)

    escolha = """ 1.Caminho mais rápido 2.Caminho mais barato 3.Caminho mais ecológico Escolha: """
    pri = input(escolha)
    while pri not in ['1', '2', '3']:
        pri = input("Opção inválida. Escolha 1, 2 ou 3: ")
    pri = int(pri)

    print(jogos[['Jogo_id', 'Estádio', 'Dia', 'Hora']].to_string(index=False))
    ids = input("IDs dos jogos (separados por vírgula): ")
    validos = set(jogos['Jogo_id'])
    lista = [int(i) for i in ids.split(',') if i.strip().isdigit()]
    while not lista or any(i not in validos for i in lista):
        ids = input("IDs inválidos. Tente novamente: ")
        lista = [int(i) for i in ids.split(',') if i.strip().isdigit()]

    destinos, ids_validos = verificar_conflitos_jogos(lista, jogos, G, DURACAO_JOGO_MIN)

    print("Destinos finais (após verificação de conflitos):", destinos)
    print("Pontos de partida disponíveis:", list(G.nodes))

    origem = input("Indique o ponto de partida: ")
    while origem not in G.nodes:
        origem = input("Ponto inválido. Tente novamente: ")

    if pri == 1:
        mais_rapido(origem, destinos, num)
    elif pri == 2:
        mais_barato(origem, destinos, num)
    else:
        mais_ecologico(origem, destinos, num)

def comparar_algoritmos():
    escolha = """
 1.DFS 2.BFS 3.UCS 4.Greedy 5.A*
 Escolha o primeiro algoritmo: """
    a1 = int(input(escolha))
    while a1 not in ALGOS:
        a1 = int(input("Insira um número de 1 a 5: "))
    a2 = int(input("Escolha o segundo algoritmo (1-5), diferente do primeiro: "))
    while a2 not in ALGOS or a2 == a1:
        a2 = int(input("Insira um valor válido e diferente do primeiro: "))
    nome1, func1 = ALGOS[a1]
    nome2, func2 = ALGOS[a2]
    print(f"Algoritmos selecionados: {nome1} e {nome2}")

    print(jogos[['Jogo_id', 'Estádio', 'Dia', 'Hora']].to_string(index=False))
    ids = input("IDs dos jogos para o percurso (separados por vírgula): ")
    validos = set(jogos['Jogo_id'])
    lista = [int(i) for i in ids.split(',') if i.strip().isdigit()]
    while not lista or any(i not in validos for i in lista):
        ids = input("IDs inválidos. Tente novamente: ")
        lista = [int(i) for i in ids.split(',') if i.strip().isdigit()]

    # VERIFICAÇÃO DE CONFLITOS
    destinos, ids_validos = verificar_conflitos_jogos(lista, jogos, G, DURACAO_JOGO_MIN)
    if not destinos:
        print("Não há destinos viáveis após resolução de conflitos.")
        return
    destino = destinos[-1]

    print("Pontos de partida disponíveis:", list(G.nodes))
    origem = input("Indique o ponto de partida: ")
    while origem not in G.nodes:
        origem = input("Ponto inválido. Tente novamente: ")

    peso = input("Peso para comparação (tempo_min, preco_eur ou emissoes_co2): ")
    while peso not in ['tempo_min', 'preco_eur', 'emissoes_co2']:
        peso = input("Peso inválido. Insira: tempo_min, preco_eur ou emissoes_co2: ")

    start1 = time.perf_counter()
    path1 = func1(G, origem, destino)
    end1 = time.perf_counter()
    custo1 = calcular_custo(G, path1, peso)

    start2 = time.perf_counter()
    path2 = func2(G, origem, destino)
    end2 = time.perf_counter()
    custo2 = calcular_custo(G, path2, peso)

    print(f"\nResultado {nome1}:")
    print(f"  Percurso: {path1}\n  Custo total ({peso}): {custo1}\n  Tempo de execução: {(end1-start1)*1000:.2f} ms")
    print(f"\nResultado {nome2}:")
    print(f"  Percurso: {path2}\n  Custo total ({peso}): {custo2}\n  Tempo de execução: {(end2-start2)*1000:.2f} ms")

menu = input("\nSimula o teu percurso\n0.Encerrar\n1.Consultar Jogos\n2.Simular o meu percurso\n3.Comparar algoritmos\nEscolha: ")
while menu != '0':
    if menu == '1':
        print(jogos[['Jogo_id', 'Estádio', 'Dia', 'Hora']].to_string(index=False))
    elif menu == '2':
        simular_percurso()
    elif menu == '3':
        comparar_algoritmos()
    else:
        print("Opção inválida.")
    menu = input("\nSimula o teu percurso\n0.Encerrar\n1.Consultar Jogos\n2.Simular o meu percurso\n3.Comparar algoritmos\nEscolha: ")
print("Programa encerrado")
